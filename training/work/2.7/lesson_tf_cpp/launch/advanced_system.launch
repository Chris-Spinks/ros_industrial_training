<launch>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  >
  <   These are the arguements that this launch file takes                        >
  <   Default Launch ex: $roslaunch lesson_tf_cpp advanced_system.launch  >
  <   Different part and Robot ex: $roslaunch lesson_tf_cpp advanced_system.launch part:=puzzle_bent robot:=irb2400 >
  < - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <arg name="robot" default="sia20" />              <!-- different robots can be used, ie robot:=irb2400 -->
  <arg name="part" default="empty_part"/>          <!-- different parts can be used, ie part:=letterS -->
  <arg name="tool" default="empty_tool"/>   <!-- different tooling can be used ie: tool:=letterS_mount -->
  <arg name="show_rviz" default="true" />           <!-- launch with show_rviz:=false to disable rviz -->
  <arg name="joint_gui" default="true" />


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  >
  <   Launch the robot model.                                                     >
  <   To add ability to launch other robots,                                      >
  <   add a "load_<robot>.launch" file to the launch/ directory.                  >
  < - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <group ns="robot" >
    <include file="$(find lesson_tf_cpp)/launch/load_$(arg robot)_data.launch" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
      <param name="use_gui" value="joint_gui" />
    </node>
  </group>
  
  
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ->
  <   Launches the environment that everything exists in.                   >
  <   Places the robot in the world, adds grinder                           >
  < - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <group ns="environment" >
    <param name="description" command="$(find xacro)/xacro.py '$(find lesson_tf_cpp)/models/environment.xacro'" />
    <node name="state_publisher" pkg="robot_state_publisher" type="state_publisher" >
      <remap from="robot_description" to="description" />
    </node>
  </group>


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ->
  <   Launches the tooling on the end of the robot arm.                     >
  <   Robot arm needs a final link named tool0 for this to be successful    >
  < - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <group ns="tool" >
    <param name="description" command="$(find xacro)/xacro.py '$(find lesson_tf_cpp)/models/$(arg tool).xacro'" />
    <node name="state_publisher" pkg="robot_state_publisher" type="state_publisher" >
      <remap from="robot_description" to="description" />
    </node>
  </group>


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ->
  <   Launches a part on the end of the tool                                >
  <   To add new parts, add <part>.xacro file to models/ directory       >
  <     and launch this file with part:=<part> arguement                    >
  < - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <group ns="part" >
    <param name="description" command="$(find xacro)/xacro.py '$(find lesson_tf_cpp)/models/$(arg part).xacro'" />
    <node name="state_publisher" pkg="robot_state_publisher" type="state_publisher" >
      <remap from="robot_description" to="description" />
    </node>
  </group>
  
  
  <!--Brings up rviz with the proper display configuration-->
  <node name="rviz" pkg="rviz" type="rviz" args="--display-config $(find lesson_tf_cpp)/config/advanced_launch.rviz" if="$(arg show_rviz)"/>
  
</launch>

